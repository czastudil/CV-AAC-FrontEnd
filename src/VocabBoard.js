import React, { useState, useEffect } from 'react';
import './VocabBoard.css';

import Button from './Button';

function VocabBoard( { selectedItem, mode, mainImageWidth }) {
    const [ currentWords, setCurrentWords ] = useState([]);
    const [ editModeOn, setEditModeOn ] = useState(false);
    const [ addWordPopUpOn, setAddWordPopUpOn ] = useState(false);
    const [ addWordPopUpPartOfSpeech, setAddWordPopUpPartOfSpeech] = useState('');
    const [ addWordPopUpInput, setAddWordPopUpInput ] = useState('');
    // const [ popUpType, setPopUpType ] = useState();
    const [ contextualWords, setContextualWords] = useState([{ word: '', partOfSpeech: null}])

    // words from https://aaclanguagelab.com/materials/100highfrequencycorewords21.pdf
    const [ coreWords, setCoreWords ] = useState([
        { word: "I", partOfSpeech: "pronoun" },
        { word: "like", partOfSpeech: "verb" },
        { word: "not", partOfSpeech: "negation" },
        { word: "want", partOfSpeech: "verb" },
        { word: "help", partOfSpeech: "verb" },
        { word: "it", partOfSpeech: "pronoun" },
        { word: "more", partOfSpeech: "descriptor" },
        { word: "different", partOfSpeech: "descriptor" },
        { word: "who", partOfSpeech: "pronoun" },
        { word: "she", partOfSpeech: "pronoun" },
        { word: "you", partOfSpeech: "pronoun" },
        { word: "he", partOfSpeech: "pronoun" },
        { word: "where", partOfSpeech: "question" },
        { word: "up", partOfSpeech: "preposition" },
        { word: "on", partOfSpeech: "preposition" },
        { word: "in", partOfSpeech: "preposition" },
        { word: "me", partOfSpeech: "pronoun" },
        { word: "make", partOfSpeech: "verb" },
        { word: "get", partOfSpeech: "verb" },
        { word: "look", partOfSpeech: "verb" },
        { word: "what", partOfSpeech: "question" },
        { word: "need", partOfSpeech: "verb" },
        { word: "are", partOfSpeech: "verb" },
        { word: "is", partOfSpeech: "verb" },
        { word: "some", partOfSpeech: "descriptor" },
        { word: "put", partOfSpeech: "verb" },
        { word: "all", partOfSpeech: "pronoun" },
        { word: "this", partOfSpeech: "pronoun" },
        { word: "don't", partOfSpeech: "negation" },
        { word: "that", partOfSpeech: "pronoun" },
        { word: "go", partOfSpeech: "verb" },
        { word: "do", partOfSpeech: "verb" },
        { word: "when", partOfSpeech: "question" },
        { word: "done", partOfSpeech: "descriptor" },
        { word: "can", partOfSpeech: "verb" },
        { word: "here", partOfSpeech: "preposition" },
        { word: "open", partOfSpeech: "verb" },
        { word: "turn", partOfSpeech: "verb" },
        { word: "stop", partOfSpeech: "negation" },
        { word: "over", partOfSpeech: "preposition" },
        { word: "the", partOfSpeech: "descriptor" },
        { word: "a", partOfSpeech: "descriptor" }
      ]);

    const msg = new SpeechSynthesisUtterance();

    useEffect(determineWordsFromSelectedItem, [selectedItem]);

    /* 
    some of these words were generated by Chat-GPT by the following prompt:

    Prompt: If a kid on the autism spectrum is using an AAC device to communicate 
    and they select the word '---', please give 6 words highly relevant to the selected 
    word that the kid could use for communication regarding the selected word. 
    Put the words in a JavaScript array where each item is an object with the 
    word and the part of speech.
    */

    function determineWordsFromSelectedItem() {
        if(selectedItem === 'blocks') {
            setContextualWords([
                { word: "blocks", partOfSpeech: "noun" },
                { word: 'build', partOfSpeech: 'verb' },
                { word: 'stack', partOfSpeech: 'verb' },
                { word: 'knock down', partOfSpeech: 'noun' },
                { word: 'play', partOfSpeech: 'verb' },
                { word: 'toy', partOfSpeech: 'noun' },
                { word: 'arrange', partOfSpeech: 'verb' }]);
        } else if(selectedItem === 'girl'){
            setContextualWords([
                { word: 'girl', partOfSpeech: 'noun' },
                { word: 'friend', partOfSpeech: 'noun' },
                { word: 'name', partOfSpeech: 'noun' },
                { word: 'play', partOfSpeech: 'noun' }]);
        } else if(selectedItem === 'boy'){
            setContextualWords([
                { word: "boy", partOfSpeech: "noun" },
                { word: "play", partOfSpeech: "verb" },
                { word: "friend", partOfSpeech: "noun" },
                { word: "run", partOfSpeech: "verb" },
                { word: "school", partOfSpeech: "noun" },
                { word: "funny", partOfSpeech: "descriptor" },
                { word: "fast", partOfSpeech: "descriptor" }]);
        } else if(selectedItem === 'teddy bear'){
            setContextualWords([
                { word: "teddy bear", partOfSpeech: "noun" },
                { word: "soft", partOfSpeech: "descriptor" },
                { word: "hug", partOfSpeech: "verb" },
                { word: "toy", partOfSpeech: "descriptor"}]);
        } else if(selectedItem === 'ball'){
            setContextualWords([
                { word: "ball", partOfSpeech: "noun" },
                { word: "play", partOfSpeech: "verb" },
                { word: "kick", partOfSpeech: "verb" },
                { word: "throw", partOfSpeech: "verb" },
                { word: "catch", partOfSpeech: "verb" },
                { word: "round", partOfSpeech: "descriptor" },
                { word: "bounce", partOfSpeech: "verb" }]);
        } else if(selectedItem === 'soccer ball'){
            setContextualWords([
                { word: "soccer ball", partOfSpeech: "noun" },
                { word: 'kick', partOfSpeech: 'verb' },
                { word: 'goal', partOfSpeech: 'noun' },
                { word: 'field', partOfSpeech: 'noun' },
                { word: 'team', partOfSpeech: 'noun' },
                { word: 'game', partOfSpeech: 'noun' },
                { word: 'score', partOfSpeech: 'verb' }]);
        } else if(selectedItem === 'slide'){
            setContextualWords([
                { word: "slide", partOfSpeech: "noun" },
                { word: "playground", partOfSpeech: "noun" },
                { word: "fun", partOfSpeech: "noun" },
                { word: "slippery", partOfSpeech: "descriptor" },]);;
        } else if(selectedItem === 'dog') {
            setContextualWords([
                { word: "dog", partOfSpeech: "noun" },
                { word: "bark", partOfSpeech: "verb" },
                { word: "pet", partOfSpeech: "verb" },
                { word: "puppy", partOfSpeech: "noun" },
                { word: "loyal", partOfSpeech: "descriptor" },
                { word: "fetch", partOfSpeech: "verb" },
                { word: "tail", partOfSpeech: "noun" }])
        } else if(selectedItem === ''){
            setContextualWords([{word: '', partOfSpeech: null}]);
        } else {
            setContextualWords([{word: 'words not set', partOfSpeech: null} ]);
        } 
    }

    function determineWordColor(partOfSpeech) {
        /* these core word colors are according to the Goossens', Crain, and Elder key */
        if(partOfSpeech === 'noun') {
            return { backgroundColor: 'rgb(233 234 139)'} //yellow
        } else if(partOfSpeech === 'descriptor' || partOfSpeech === 'adverb' || partOfSpeech === 'adjective') {
            return { backgroundColor: 'rgb(165 225 245)'} //blue
        } else if(partOfSpeech === 'question' || partOfSpeech === 'negation' || partOfSpeech === 'pronoun' || partOfSpeech === 'interjection') {
            return { backgroundColor: '#eec2a5'} //orange
        } else if(partOfSpeech === 'verb') {
            return { backgroundColor: 'rgb(254 211 244)'} //pink
        } else if(partOfSpeech === 'preposition') {
            return { backgroundColor: '#b8d5c3'} //green
        }
    }

    function wordToCurrentWordButton(value, index, array) {
        return (
            <button 
            className='currentWordButton'
            key={index+''+Math.random()}
            style={determineWordColor(value.partOfSpeech)}>
                <div className='wordOnly'>{value.word}</div>
            </button>
        )
    }
    
    function wordToWordButton(value, index, array) {
        return (
            <button 
            className='wordButton'
            key={index+''+Math.random()}
            style={determineWordColor(value.partOfSpeech)}
            onClick={() => setCurrentWords(prevWords => [...prevWords, value])}>
                <div className='wordOnly'>{value.word}</div>
            </button>
        )
    }

    function addWordButton() {
        function handleAddWord() {
            setAddWordPopUpOn(true);
        }

        return (
            <button 
            className='wordButton'
            onClick={handleAddWord}>
                <div className='wordOnly'>+</div>
            </button>
        )
    }

    function wordToWordButtonEditMode(value, index, array) {
        function handleRemoveWord() {
            setCoreWords(coreWords.filter((item) => {
                if(item.word !== value.word) {
                    return item;
                }
            }))
        }

        return (
            <button 
            className='wordButtonEditMode'
            key={index+''+Math.random()}
            style={determineWordColor(value.partOfSpeech)}
            onClick={() => handleRemoveWord()}>
                <div className='wordOnly'>{value.word}</div>
            </button>
        )
    }

    function handlePlay() {
        msg.text = currentWords.map((value) => value.word).toString();
        window.speechSynthesis.speak(msg);
    }

    function handleDelete() {
        setCurrentWords(currentWords.slice(0, -1));
    }

    function handleClear() {
        setCurrentWords([]);
    }

    function handleEdit() {
        if(editModeOn) {
            setEditModeOn(false);
        } else {
            setEditModeOn(true);
        }
    }

    function renderPopUp() {
        function handlePopUpSubmit() {
            setAddWordPopUpOn(false);
            setCoreWords(coreWords.concat({word: addWordPopUpInput, partOfSpeech: addWordPopUpPartOfSpeech}));
        }

        function handlePopUpCancel() {
            setAddWordPopUpOn(false);
        }

        if(addWordPopUpOn) {
            return (
                <form className='popUp' onSubmit={handlePopUpSubmit}>
                    <label>Enter desired text:
                        <input 
                        type="text"
                        onChange={(e) => setAddWordPopUpInput(e.target.value)} />
                    </label>
                    <br></br>
                    <label>Select part of speech:
                        <select onChange={(e) => setAddWordPopUpPartOfSpeech(e.target.value)}>
                            <option value="null" selected></option>
                            <option value="descriptor">Descriptor</option>
                            <option value="interjection">Interjection</option>
                            <option value="noun">Noun</option>
                            <option value="preposition">Preposition</option>
                            <option value="pronoun">Pronoun</option>
                            <option value="question">Question</option>
                            <option value="verb">Verb</option>
                        </select>
                    </label>
                    <br></br>
                    <div style={{display: 'flex', flexFlow: 'row'}}>
                        <input type='submit'/>
                        <button style={{margin: '0px 5px'}} onClick={handlePopUpCancel}>Cancel</button>
                    </div>
                </form>
            )
        }
    }

    function wordToWordButtonSwitcher(word) {
        if(!editModeOn) {
            return wordToWordButton(word);
        } else {
            return wordToWordButtonEditMode(word);
        };
    }

    function renderWords(wordType) {
        const descriptors = wordType.filter(item => {
            if(item.partOfSpeech === 'descriptor' || item.partOfSpeech === 'adverb' || item.partOfSpeech === 'adjective') {
            return item
        }});
        const miscellaneous = wordType.filter(item => {
            if(item.partOfSpeech === 'question' || item.partOfSpeech === 'negation' || item.partOfSpeech === 'pronoun' || item.partOfSpeech === 'interjection') {
            return item
        }});
        const prepositions = wordType.filter(item => {
            if(item.partOfSpeech === 'preposition') {
            return item
        }});
        const nouns = wordType.filter(item => {
            if(item.partOfSpeech === 'noun') {
            return item
        }});
        const verbs = wordType.filter(item => {
            if(item.partOfSpeech === 'verb') {
            return item
        }});

        return (
            <div className={wordType === coreWords ? 'coreWords' : wordType === contextualWords ? 'contextualWords' : null}>
                    {descriptors.map(word => wordToWordButtonSwitcher(word))}
                    {miscellaneous.map(word => wordToWordButtonSwitcher(word))}
                    {prepositions.map(word => wordToWordButtonSwitcher(word))} 
                    {nouns.length > 0 ? nouns.map(word => wordToWordButtonSwitcher(word)) : null}
                    {verbs.map(word => wordToWordButtonSwitcher(word))}
                    {!editModeOn ? null : wordType === coreWords ? addWordButton() : null}
                    {!editModeOn ? null : renderPopUp()}
            </div>
        )
    }

    function wordToWordButtonBeginner(value, index, array) {
        return (
            <button 
            className='wordButton'
            key={index+''+Math.random()}
            style={determineWordColor(value.partOfSpeech)}
            onClick={() => handlePlayBeginner(value.word)}>
                <div className='wordOnly'>{value.word}</div>
            </button>
        )
    }

    function handlePlayBeginner(word) {
        msg.text = word;
        window.speechSynthesis.speak(msg);
    }

    function renderWordsBeginner(wordType) {
            return (
                <div className='contextualWords' style={{width: mainImageWidth+"px"}}>
                        {wordType.filter(item => {
                            if(item.partOfSpeech === 'descriptor') {
                            return item
                        }}).map(word => wordToWordButtonBeginner(word))}
                        {wordType.filter(item => {
                            if(item.partOfSpeech === 'question' || item.partOfSpeech === 'negation' || item.partOfSpeech === 'pronoun' || item.partOfSpeech === 'interjection') {
                            return item
                        }}).map(word => wordToWordButtonBeginner(word))}
                        {wordType.filter(item => {
                            if(item.partOfSpeech === 'preposition') {
                            return item
                        }}).map(word => wordToWordButtonBeginner(word))} 
                        {wordType.filter(item => {
                            if(item.partOfSpeech === 'noun') {
                            return item
                        }}).map(word => wordToWordButtonBeginner(word))}
                        {wordType.filter(item => {
                            if(item.partOfSpeech === 'verb') {
                            return item
                        }}).map(word => wordToWordButtonBeginner(word))}
                </div>
            )
    }

    if(mode === 'intermediate') {
        return (
            <div className='vocabBoard'>
                <div className='wordPlayer'>
                    <div style={{
                        display: 'flex',
                        flexDirection: 'column'
                    }}>
                        <div style={{fontSize: 'large', fontWeight: 'bold', padding: '5px'}}>My Sentence:</div>
                        <div style={{
                            display: 'flex',
                            flexDirection: 'row'
                        }}>
                            <div onClick={handleDelete} style={{flex: 1, margin: '3px'}}>
                                <Button buttonType="delete"/>
                            </div>
                            <div onClick={handleClear} style={{flex: 1, margin: '3px', marginTop: '9px'}}>
                                <Button buttonType="clear"/>
                            </div>
                        </div>
                        <div style={{
                            display: 'flex',
                            flexDirection: 'row'
                        }}>
                            <div onClick={handlePlay} style={{flex: 1, margin: '3px'}}>
                                <Button buttonType="play"/>
                            </div>
                            <div onClick={handleEdit}  style={{flex: 1, margin: '3px'}}>
                                <Button buttonType="edit"/>
                            </div>
                        </div>
                    </div>
                    <div 
                    style={ {
                        display: 'flex',
                        flex: 8,
                        justifyContent: 'center',
                        flexWrap: 'wrap'} }>
                        {currentWords.map(word => wordToCurrentWordButton(word))}
                        </div>
                </div>
                {renderWords(contextualWords)}
                {renderWords(coreWords)}
            </div>
        )
    } else if(mode === 'beginner') {
        return (
        <div className='vocabBoard'>
            {renderWordsBeginner(contextualWords)}
        </div>
        )
    }
}

export default VocabBoard;